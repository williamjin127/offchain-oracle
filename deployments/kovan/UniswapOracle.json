{
  "address": "0x11431a89893025D2a48dCA4EddC396f8C8117187",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IUniswapFactory",
          "name": "factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "srcToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "dstToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "connector",
          "type": "address"
        }
      ],
      "name": "getRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3cfd407f7083363611ba06d6e720f6ce22751498f140d07724a73c10fdcba759",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0x11431a89893025D2a48dCA4EddC396f8C8117187",
    "transactionIndex": 19,
    "gasUsed": "465454",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xd3889325040ce3e820b536d91bee5e84b0fcc2a1431a3b6d2ee2939e14a660cb",
    "transactionHash": "0x3cfd407f7083363611ba06d6e720f6ce22751498f140d07724a73c10fdcba759",
    "logs": [],
    "blockNumber": 24175278,
    "cumulativeGasUsed": "6333805",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xECc6C0542710a0EF07966D7d1B10fA38bbb86523"
  ],
  "solcInputHash": "ece702581bd14c1dbfa865c9a25644fd",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IUniswapFactory\",\"name\":\"factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"connector\",\"type\":\"address\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/UniswapOracle.sol\":\"UniswapOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IOracle {\\n    function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector) external view returns (uint256 rate, uint256 weight);\\n}\\n\",\"keccak256\":\"0x108abc1d8fff266112dbbc6838ae1439af64aa4fd2a13aacb3e974f6b5690f15\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IUniswapFactory {\\n    function getExchange(IERC20 token) external view returns (address exchange);\\n}\\n\",\"keccak256\":\"0x2962c0946f3dc3c778fb76ca821923cc2d85f857f2145f100bbc7f60d32dc7f8\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Sqrt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\n\\nlibrary Sqrt {\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2e8ce5631cbb49ca51da7c90d5313cfff9712ec4a9e47a37fd91dacd033deca0\",\"license\":\"MIT\"},\"contracts/oracles/OracleBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"../libraries/Sqrt.sol\\\";\\n\\n\\nabstract contract OracleBase is IOracle {\\n    using SafeMath for uint256;\\n    using Sqrt for uint256;\\n\\n    IERC20 private constant _NONE = IERC20(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF);\\n\\n    function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector) external view override returns (uint256 rate, uint256 weight) {\\n        uint256 balance0;\\n        uint256 balance1;\\n        if (connector == _NONE) {\\n            (balance0, balance1) = _getBalances(srcToken, dstToken);\\n        } else {\\n            uint256 balanceConnector0;\\n            uint256 balanceConnector1;\\n            (balance0, balanceConnector0) = _getBalances(srcToken, connector);\\n            (balanceConnector1, balance1) = _getBalances(connector, dstToken);\\n            if (balanceConnector0 > balanceConnector1) {\\n                balance0 = balance0.mul(balanceConnector1).div(balanceConnector0);\\n            } else {\\n                balance1 = balance1.mul(balanceConnector0).div(balanceConnector1);\\n            }\\n        }\\n\\n        rate = balance1.mul(1e18).div(balance0);\\n        weight = balance0.mul(balance1).sqrt();\\n    }\\n\\n    function _getBalances(IERC20 srcToken, IERC20 dstToken) internal view virtual returns (uint256 srcBalance, uint256 dstBalance);\\n}\\n\",\"keccak256\":\"0xe2a9bf9d8f35914ab013593de15f64e379958c179d05cc4a5a2118786efdd3c5\",\"license\":\"MIT\"},\"contracts/oracles/UniswapOracle.sol\":{\"content\":\"// @unsupported: ovm\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"../interfaces/IUniswapFactory.sol\\\";\\nimport \\\"./OracleBase.sol\\\";\\n\\n\\ncontract UniswapOracle is OracleBase {\\n    IUniswapFactory private immutable _UNISWAP_FACTORY;\\n    IERC20 private constant _ETH = IERC20(0x0000000000000000000000000000000000000000);\\n\\n    constructor(IUniswapFactory factory) {\\n        _UNISWAP_FACTORY = factory;\\n    }\\n\\n    function _getBalances(IERC20 srcToken, IERC20 dstToken) internal view override returns (uint256 srcBalance, uint256 dstBalance) {\\n        if (srcToken == _ETH) {\\n            address exchange = _UNISWAP_FACTORY.getExchange(dstToken);\\n            require(exchange != address(0), \\\"Pool does not exist\\\");\\n            srcBalance = exchange.balance;\\n            dstBalance = dstToken.balanceOf(exchange);\\n        } else if (dstToken == _ETH) {\\n            address exchange = _UNISWAP_FACTORY.getExchange(srcToken);\\n            require(exchange != address(0), \\\"Pool does not exist\\\");\\n            srcBalance = srcToken.balanceOf(exchange);\\n            dstBalance = exchange.balance;\\n        } else {\\n            revert(\\\"Unsupported tokens\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x37e57a73c0c07879b63bdf04534520d5d4a898103fa664d77aeb4cdc5a91f7e7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516107e63803806107e68339818101604052602081101561003357600080fd5b5051606081901b6001600160601b0319166080526001600160a01b031661077a61006c60003980610174528061037e525061077a6000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806314999e7914610030575b600080fd5b6100756004803603606081101561004657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101358216916040909101351661008e565b6040805192835260208301919091528051918290030190f35b600080808073ffffffffffffffffffffffffffffffffffffffff85811614156100c5576100bb8787610152565b909250905061011c565b6000806100d28988610152565b90945091506100e18789610152565b935090508082111561010857610101826100fb86846105d4565b90610650565b9350610119565b610116816100fb85856105d4565b92505b50505b610132826100fb83670de0b6b3a76400006105d4565b935061014661014183836105d4565b6106d1565b92505050935093915050565b60008073ffffffffffffffffffffffffffffffffffffffff841661035f5760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166306f2bf62856040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156101f957600080fd5b505afa15801561020d573d6000803e3d6000fd5b505050506040513d602081101561022357600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff81166102a957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f7420657869737400000000000000000000000000604482015290519081900360640190fd5b8073ffffffffffffffffffffffffffffffffffffffff163192508373ffffffffffffffffffffffffffffffffffffffff166370a08231826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561032a57600080fd5b505afa15801561033e573d6000803e3d6000fd5b505050506040513d602081101561035457600080fd5b505191506105cd9050565b73ffffffffffffffffffffffffffffffffffffffff83166105665760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166306f2bf62866040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561040357600080fd5b505afa158015610417573d6000803e3d6000fd5b505050506040513d602081101561042d57600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff81166104b357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f7420657869737400000000000000000000000000604482015290519081900360640190fd5b8473ffffffffffffffffffffffffffffffffffffffff166370a08231826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561051a57600080fd5b505afa15801561052e573d6000803e3d6000fd5b505050506040513d602081101561054457600080fd5b5051925073ffffffffffffffffffffffffffffffffffffffff163190506105cd565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f556e737570706f7274656420746f6b656e730000000000000000000000000000604482015290519081900360640190fd5b9250929050565b6000826105e35750600061064a565b828202828482816105f057fe5b0414610647576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806107246021913960400191505060405180910390fd5b90505b92915050565b60008082116106c057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816106c957fe5b049392505050565b60006003821115610714575080600160028204015b8181101561070e578091506002818285816106fd57fe5b04018161070657fe5b0490506106e6565b5061071e565b811561071e575060015b91905056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220d8cb304c2568f92002193a9ceebd8371cb82c909295c99c62d4b3672394c76c664736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806314999e7914610030575b600080fd5b6100756004803603606081101561004657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101358216916040909101351661008e565b6040805192835260208301919091528051918290030190f35b600080808073ffffffffffffffffffffffffffffffffffffffff85811614156100c5576100bb8787610152565b909250905061011c565b6000806100d28988610152565b90945091506100e18789610152565b935090508082111561010857610101826100fb86846105d4565b90610650565b9350610119565b610116816100fb85856105d4565b92505b50505b610132826100fb83670de0b6b3a76400006105d4565b935061014661014183836105d4565b6106d1565b92505050935093915050565b60008073ffffffffffffffffffffffffffffffffffffffff841661035f5760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166306f2bf62856040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156101f957600080fd5b505afa15801561020d573d6000803e3d6000fd5b505050506040513d602081101561022357600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff81166102a957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f7420657869737400000000000000000000000000604482015290519081900360640190fd5b8073ffffffffffffffffffffffffffffffffffffffff163192508373ffffffffffffffffffffffffffffffffffffffff166370a08231826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561032a57600080fd5b505afa15801561033e573d6000803e3d6000fd5b505050506040513d602081101561035457600080fd5b505191506105cd9050565b73ffffffffffffffffffffffffffffffffffffffff83166105665760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166306f2bf62866040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561040357600080fd5b505afa158015610417573d6000803e3d6000fd5b505050506040513d602081101561042d57600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff81166104b357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f7420657869737400000000000000000000000000604482015290519081900360640190fd5b8473ffffffffffffffffffffffffffffffffffffffff166370a08231826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561051a57600080fd5b505afa15801561052e573d6000803e3d6000fd5b505050506040513d602081101561054457600080fd5b5051925073ffffffffffffffffffffffffffffffffffffffff163190506105cd565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f556e737570706f7274656420746f6b656e730000000000000000000000000000604482015290519081900360640190fd5b9250929050565b6000826105e35750600061064a565b828202828482816105f057fe5b0414610647576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806107246021913960400191505060405180910390fd5b90505b92915050565b60008082116106c057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816106c957fe5b049392505050565b60006003821115610714575080600160028204015b8181101561070e578091506002818285816106fd57fe5b04018161070657fe5b0490506106e6565b5061071e565b811561071e575060015b91905056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220d8cb304c2568f92002193a9ceebd8371cb82c909295c99c62d4b3672394c76c664736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}