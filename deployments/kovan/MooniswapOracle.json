{
  "address": "0xb707d89D29c189421163515c59E42147371D6857",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IMooniswapFactory",
          "name": "_factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IMooniswapFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "srcToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "dstToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "connector",
          "type": "address"
        }
      ],
      "name": "getRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x76f6af4d055a0017a1cd6dc87d92a9cac6098f5d8619bcf71413f708c9e15620",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0xb707d89D29c189421163515c59E42147371D6857",
    "transactionIndex": 16,
    "gasUsed": "434733",
    "logsBloom": "0x
    "blockHash": "0xd88c54aa70ecc3e7ee2747d9228802f81a10ca9a60b9d8da3dbed87fdea0f48f",
    "transactionHash": "0x76f6af4d055a0017a1cd6dc87d92a9cac6098f5d8619bcf71413f708c9e15620",
    "logs": [],
    "blockNumber": 24175233,
    "cumulativeGasUsed": "4796931",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2Be171963835b6d21202b62EEE54c67910680129"
  ],
  "solcInputHash": "df628ebd5fbee88a5f24005a25f81131",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IMooniswapFactory\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IMooniswapFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"connector\",\"type\":\"address\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/MooniswapOracle.sol\":\"MooniswapOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"contracts/interfaces/IMooniswap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IMooniswap {\\n    function getTokens() external view returns(IERC20[] memory tokens);\\n}\\n\",\"keccak256\":\"0x2ebd3ee9a6d6e2cf204cee72dd6c186105b6fccf54fa31876a66b598b820d739\",\"license\":\"MIT\"},\"contracts/interfaces/IMooniswapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./IMooniswap.sol\\\";\\n\\ninterface IMooniswapFactory {\\n    function pools(IERC20 token0, IERC20 token1) external view returns (IMooniswap);\\n}\\n\",\"keccak256\":\"0x812c29a6530d8f2bebc40c2901497aecd729aa87745eeb5ba95f872f66ac0d41\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IOracle {\\n    function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector) external view returns (uint256 rate, uint256 weight);\\n}\\n\",\"keccak256\":\"0x108abc1d8fff266112dbbc6838ae1439af64aa4fd2a13aacb3e974f6b5690f15\",\"license\":\"MIT\"},\"contracts/libraries/Sqrt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\n\\nlibrary Sqrt {\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2e8ce5631cbb49ca51da7c90d5313cfff9712ec4a9e47a37fd91dacd033deca0\",\"license\":\"MIT\"},\"contracts/oracles/MooniswapOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"../interfaces/IMooniswapFactory.sol\\\";\\nimport \\\"./OracleBase.sol\\\";\\n\\n\\ncontract MooniswapOracle is OracleBase {\\n    IMooniswapFactory public immutable factory;\\n\\n    constructor(IMooniswapFactory _factory) {\\n        factory = _factory;\\n    }\\n\\n    function _getBalances(IERC20 srcToken, IERC20 dstToken) internal view override returns (uint256, uint256) {\\n        IMooniswap mooniswap = factory.pools(srcToken, dstToken);\\n        IERC20[] memory tokens = mooniswap.getTokens();\\n        uint256[2] memory balances;\\n        for (uint256 i = 0; i < 2; ++i) {\\n            balances[i] = tokens[i].balanceOf(address(mooniswap));\\n        }\\n        if (tokens[0] == srcToken) {\\n            return (balances[0], balances[1]);\\n        } else {\\n            return (balances[1], balances[0]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8e004d368a0be926f3a7717a98059b9f90630adfce83c41eb93b769509f36b66\",\"license\":\"MIT\"},\"contracts/oracles/OracleBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"../libraries/Sqrt.sol\\\";\\n\\n\\nabstract contract OracleBase is IOracle {\\n    using SafeMath for uint256;\\n    using Sqrt for uint256;\\n\\n    IERC20 private constant _NONE = IERC20(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF);\\n\\n    function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector) external view override returns (uint256 rate, uint256 weight) {\\n        uint256 balance0;\\n        uint256 balance1;\\n        if (connector == _NONE) {\\n            (balance0, balance1) = _getBalances(srcToken, dstToken);\\n        } else {\\n            uint256 balanceConnector0;\\n            uint256 balanceConnector1;\\n            (balance0, balanceConnector0) = _getBalances(srcToken, connector);\\n            (balanceConnector1, balance1) = _getBalances(connector, dstToken);\\n            if (balanceConnector0 > balanceConnector1) {\\n                balance0 = balance0.mul(balanceConnector1).div(balanceConnector0);\\n            } else {\\n                balance1 = balance1.mul(balanceConnector0).div(balanceConnector1);\\n            }\\n        }\\n\\n        rate = balance1.mul(1e18).div(balance0);\\n        weight = balance0.mul(balance1).sqrt();\\n    }\\n\\n    function _getBalances(IERC20 srcToken, IERC20 dstToken) internal view virtual returns (uint256 srcBalance, uint256 dstBalance);\\n}\\n\",\"keccak256\":\"0xe2a9bf9d8f35914ab013593de15f64e379958c179d05cc4a5a2118786efdd3c5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516107533803806107538339818101604052602081101561003357600080fd5b5051606081901b6001600160601b0319166080526001600160a01b03166106e761006c6000398061019052806101b952506106e76000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806314999e791461003b578063c45a015514610099575b600080fd5b6100806004803603606081101561005157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135821691604090910135166100ca565b6040805192835260208301919091528051918290030190f35b6100a161018e565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b600080808073ffffffffffffffffffffffffffffffffffffffff8581161415610101576100f787876101b2565b9092509050610158565b60008061010e89886101b2565b909450915061011d87896101b2565b93509050808211156101445761013d826101378684610523565b9061059f565b9350610155565b610152816101378585610523565b92505b50505b61016e8261013783670de0b6b3a7640000610523565b935061018261017d8383610523565b610620565b92505050935093915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663901754d786866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561025c57600080fd5b505afa158015610270573d6000803e3d6000fd5b505050506040513d602081101561028657600080fd5b5051604080517faa6ca808000000000000000000000000000000000000000000000000000000008152905191925060009173ffffffffffffffffffffffffffffffffffffffff84169163aa6ca8089160048083019286929190829003018186803b1580156102f357600080fd5b505afa158015610307573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561034e57600080fd5b810190808051604051939291908464010000000082111561036e57600080fd5b90830190602082018581111561038357600080fd5b82518660208202830111640100000000821117156103a057600080fd5b82525081516020918201928201910280838360005b838110156103cd5781810151838201526020016103b5565b5050505090500160405250505090506103e4610672565b60005b60028110156104af578281815181106103fc57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561046a57600080fd5b505afa15801561047e573d6000803e3d6000fd5b505050506040513d602081101561049457600080fd5b50518282600281106104a257fe5b60200201526001016103e7565b508673ffffffffffffffffffffffffffffffffffffffff16826000815181106104d457fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16141561050f5780518160015b60200201519450945050505061051c565b60208101518160006104fe565b9250929050565b60008261053257506000610599565b8282028284828161053f57fe5b0414610596576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806106916021913960400191505060405180910390fd5b90505b92915050565b600080821161060f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161061857fe5b049392505050565b60006003821115610663575080600160028204015b8181101561065d5780915060028182858161064c57fe5b04018161065557fe5b049050610635565b5061066d565b811561066d575060015b919050565b6040518060400160405280600290602082028036833750919291505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220830c1d6ab37d25848ad03cbb5e786ec7d751bc5c8a225230603722139e82050964736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806314999e791461003b578063c45a015514610099575b600080fd5b6100806004803603606081101561005157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135821691604090910135166100ca565b6040805192835260208301919091528051918290030190f35b6100a161018e565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b600080808073ffffffffffffffffffffffffffffffffffffffff8581161415610101576100f787876101b2565b9092509050610158565b60008061010e89886101b2565b909450915061011d87896101b2565b93509050808211156101445761013d826101378684610523565b9061059f565b9350610155565b610152816101378585610523565b92505b50505b61016e8261013783670de0b6b3a7640000610523565b935061018261017d8383610523565b610620565b92505050935093915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663901754d786866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561025c57600080fd5b505afa158015610270573d6000803e3d6000fd5b505050506040513d602081101561028657600080fd5b5051604080517faa6ca808000000000000000000000000000000000000000000000000000000008152905191925060009173ffffffffffffffffffffffffffffffffffffffff84169163aa6ca8089160048083019286929190829003018186803b1580156102f357600080fd5b505afa158015610307573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561034e57600080fd5b810190808051604051939291908464010000000082111561036e57600080fd5b90830190602082018581111561038357600080fd5b82518660208202830111640100000000821117156103a057600080fd5b82525081516020918201928201910280838360005b838110156103cd5781810151838201526020016103b5565b5050505090500160405250505090506103e4610672565b60005b60028110156104af578281815181106103fc57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561046a57600080fd5b505afa15801561047e573d6000803e3d6000fd5b505050506040513d602081101561049457600080fd5b50518282600281106104a257fe5b60200201526001016103e7565b508673ffffffffffffffffffffffffffffffffffffffff16826000815181106104d457fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16141561050f5780518160015b60200201519450945050505061051c565b60208101518160006104fe565b9250929050565b60008261053257506000610599565b8282028284828161053f57fe5b0414610596576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806106916021913960400191505060405180910390fd5b90505b92915050565b600080821161060f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161061857fe5b049392505050565b60006003821115610663575080600160028204015b8181101561065d5780915060028182858161064c57fe5b04018161065557fe5b049050610635565b5061066d565b811561066d575060015b919050565b6040518060400160405280600290602082028036833750919291505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220830c1d6ab37d25848ad03cbb5e786ec7d751bc5c8a225230603722139e82050964736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}